module line_following(
    input clk_50,
    input dout,
    output din,
	output A1A,
	output A1B,
	output B1A,
	output B1B
);

reg [11:0] lsa_1;
reg [11:0] lsa_2;
reg [11:0] lsa_3;

reg [7:0] duty_cycle1;
reg [7:0] duty_cycle2;

reg [2:0] motor_inp_1;
reg [2:0] motor_inp_2;

reg adc_cs_n = 0;

adc_control ADC1(.d_out_ch5.(lsa_1),
                .d_out_ch6(lsa_2),
                .d_out_ch7(lsa_3),
                .din(din),
                .dout(dout),
                .adc_cs_n(adc_cs_n)
);

motor motor_control(
    .clk_50(clk_50),
    .duty_cycle1(duty_cycle1),
    .duty_cycle2(duty_cycle2),
    .A1A(A1A),
    .A1B(A1B),
    .B1A(B1A),
    .B1B(B1B),
)

parameter Kp = 12'b1;
parameter Kp = 12'b0;
parameter Ki = 12'b0;
parameter thr = 12'b0;

reg bool_l1;
reg bool_l2;
reg bool_l3;

//error
reg signed [11:0] error = 0;
reg signed [11:0] prev_error = 0;
reg signed [11:0] diff_error = 0;
reg signed [11:0] sum_error = 0;
reg signed [11:0] delta;


reg [7:0] optimum_pwm <= 8'd60;

always @ (posedge clk_50) begin
    if(lsa_1 > thr) begin
        bool_l1 <= 1;
    end
    if(lsa_2 > thr) begin
        bool_l1 <= 1;
    end
    if(lsa_3 > thr) begin
        bool_l1 <= 1;
    end

    case({bool_l1,bool_l2,bool_l3})
        3'b010: begin //straight line
            error <= 0;
            sum_error <= 0;
        end
        3'b011: begin
            error <= 12'd1;
        end
        3'b001: begin
            error <= 12'd2;
        end
        3'b110: begin
            error <= 12'd1;
        end
        3'b100: begin
            error <= -12'd2;
        end
        3'b000: begin
            error <= -12'd2;
        end
    endcase
    diff_error <= prev_error - error;
    sum_error <= sum_error + error;
    if(sum_error > 12'd30)
        sum_error <= 12'd30;
    if(sum_error < -12'd30)
        sum_error <= -12'd30;

    delta <= Kp * error + Kd * diff_error + Ki * sum_error;

    motor_inp_1 <= optimum_pwm - delta;
    motor_inp_2 <= optimum_pwm + delta;
end